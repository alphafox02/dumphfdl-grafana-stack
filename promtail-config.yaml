server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/promtail-positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # =========================
  # HFDL (dumphfdl JSONL)
  # =========================
  - job_name: dumphfdl
    static_configs:
      - targets: [localhost]
        labels:
          job: dumphfdl
          __path__: /logs/hfdl_*.jsonl

    pipeline_stages:
      - json:
          expressions:
            app: hfdl.app.name
            ver: hfdl.app.ver
            station: hfdl.station
            tsecs: hfdl.t.sec
            tusec: hfdl.t.usec
            freq: hfdl.freq
            bit_rate: hfdl.bit_rate
            sig_db: hfdl.sig_level
            noise_db: hfdl.noise_level
            skew_hz: hfdl.freq_skew
            slot: hfdl.slot

            # LPDU basics
            lpdu_type_id: hfdl.lpdu.type.id
            lpdu_type: hfdl.lpdu.type.name
            src_type: hfdl.lpdu.src.type
            src_id: hfdl.lpdu.src.id
            dst_type: hfdl.lpdu.dst.type
            dst_id: hfdl.lpdu.dst.id
            dst_name: hfdl.lpdu.dst.name
            icao: hfdl.lpdu.ac_info.icao

            # HFNPDU / ACARS bits
            hfnpdu_type_id: hfdl.lpdu.hfnpdu.type.id
            hfnpdu_type: hfdl.lpdu.hfnpdu.type.name
            flight_id: hfdl.lpdu.hfnpdu.flight_id

            # Position (when present)
            pos_lat: hfdl.lpdu.hfnpdu.pos.lat
            pos_lon: hfdl.lpdu.hfnpdu.pos.lon

            # ACARS envelope (when present)
            acars_label: hfdl.lpdu.hfnpdu.acars.label
            acars_flight: hfdl.lpdu.hfnpdu.acars.flight
            acars_reg: hfdl.lpdu.hfnpdu.acars.reg
            acars_msg: hfdl.lpdu.hfnpdu.acars.msg_text

      # has_pos helper -> set a simple flag we can filter on
      - template:
          source: "message"
          template: '{{ if and .pos_lat .pos_lon }}1{{ else }}0{{ end }}'
          dest: has_pos

      # Trim flight_id for nicer labels/tooltips -> create 'flight' field
      - template:
          source: flight
          template: '{{ trim .flight_id }}'

      # Normalize label-safe strings
      - replace:
          source: dst_name
          expression: '[^A-Za-z0-9_.-]'
          replace: '_'
      - replace:
          source: acars_flight
          expression: '[^A-Za-z0-9_.-]'
          replace: '_'
      - replace:
          source: acars_reg
          expression: '[^A-Za-z0-9_.-]'
          replace: '_'

      # Labels to promote (simple list form)
      - labels:
          station:
          freq:
          bit_rate:
          slot:
          lpdu_type:
          dst_type:
          dst_name:
          icao:
          flight_id:
          flight:
          acars_label:
          acars_flight:
          hfnpdu_type:
          has_pos:
          sig_db:

      - timestamp:
          source: tsecs
          format: Unix


  # =========================
  # VDL2 (dumpvdl2 JSONL)
  # =========================
  - job_name: dumpvdl2
    static_configs:
      - targets: [localhost]
        labels:
          job: dumpvdl2
          __path__: /logs/vdl2_*.jsonl

    pipeline_stages:
      - json:
          expressions:
            app: vdl2.app.name
            ver: vdl2.app.ver
            station: vdl2.station
            tsecs: vdl2.t.sec
            tusec: vdl2.t.usec
            freq: vdl2.freq
            burst_len: vdl2.burst_len_octets
            hdr_bits_fixed: vdl2.hdr_bits_fixed
            fec_octets: vdl2.octets_corrected_by_fec
            idx: vdl2.idx
            sig_db: vdl2.sig_level
            noise_db: vdl2.noise_level
            skew_ppm: vdl2.freq_skew

            # AVLC envelope (common metadata you might want later)
            avlc_cr: vdl2.avlc.cr
            avlc_frame_type: vdl2.avlc.frame_type
            avlc_cmd: vdl2.avlc.cmd
            avlc_src_addr: vdl2.avlc.src.addr
            avlc_src_type: vdl2.avlc.src.type
            avlc_dst_addr: vdl2.avlc.dst.addr
            avlc_dst_type: vdl2.avlc.dst.type

            # ACARS under AVLC (your sample shows it here)
            acars_label: vdl2.avlc.acars.label
            acars_block_id: vdl2.avlc.acars.blk_id
            acars_mode: vdl2.avlc.acars.mode
            acars_reg: vdl2.avlc.acars.reg
            acars_flight: vdl2.avlc.acars.flight
            acars_txt: vdl2.avlc.acars.msg_text

            # Fallbacks if a build emits top-level acars (keep them too)
            acars_label2: vdl2.acars.label
            acars_block_id2: vdl2.acars.block_id
            acars_mode2: vdl2.acars.mode
            acars_reg2: vdl2.acars.reg
            acars_flight2: vdl2.acars.flight
            acars_txt2: vdl2.acars.msg_text

            # Position possibilities (structured)
            pos_lat_acars: vdl2.avlc.acars.pos.lat
            pos_lon_acars: vdl2.avlc.acars.pos.lon
            pos_lat_raw: vdl2.pos.lat
            pos_lon_raw: vdl2.pos.lon

      # Coalesce ACARS/top-level into unified acars_* fields
      - template:
          source: "message"
          template: '{{ if .acars_label }}{{ .acars_label }}{{ else }}{{ .acars_label2 }}{{ end }}'
          dest: acars_label_u
      - template:
          source: "message"
          template: '{{ if .acars_block_id }}{{ .acars_block_id }}{{ else }}{{ .acars_block_id2 }}{{ end }}'
          dest: acars_block_id_u
      - template:
          source: "message"
          template: '{{ if .acars_mode }}{{ .acars_mode }}{{ else }}{{ .acars_mode2 }}{{ end }}'
          dest: acars_mode_u
      - template:
          source: "message"
          template: '{{ if .acars_reg }}{{ .acars_reg }}{{ else }}{{ .acars_reg2 }}{{ end }}'
          dest: acars_reg_u
      - template:
          source: "message"
          template: '{{ if .acars_flight }}{{ .acars_flight }}{{ else }}{{ .acars_flight2 }}{{ end }}'
          dest: acars_flight_u
      - template:
          source: "message"
          template: '{{ if .acars_txt }}{{ .acars_txt }}{{ else }}{{ .acars_txt2 }}{{ end }}'
          dest: acars_txt_u

      # Unified position fields for the map (structured JSON first)
      - template:
          source: "message"
          template: '{{ if .pos_lat_acars }}{{ .pos_lat_acars }}{{ else }}{{ .pos_lat_raw }}{{ end }}'
          dest: pos_lat
      - template:
          source: "message"
          template: '{{ if .pos_lon_acars }}{{ .pos_lon_acars }}{{ else }}{{ .pos_lon_raw }}{{ end }}'
          dest: pos_lon

      # Extract lat/lon from ACARS msg_text like "/+34.271/-83.172/..."
      - regex:
          source: acars_txt_u
          expression: '(?P<pos_lat>[+-][0-9]{2,3}\.[0-9]{3})\/(?P<pos_lon>[+-][0-9]{2,3}\.[0-9]{3})'

      # Flag rows with coordinates (recompute after regex)
      - template:
          source: "message"
          template: '{{ if and .pos_lat .pos_lon }}1{{ else }}0{{ end }}'
          dest: has_pos

      # Normalize label-safe strings (flight/reg can have odd chars like ".N5179A")
      - replace:
          source: acars_flight_u
          expression: '[^A-Za-z0-9_.-]'
          replace: '_'
      - replace:
          source: acars_reg_u
          expression: '[^A-Za-z0-9_.-]'
          replace: '_'

      # Promote labels (simple list form)
      - labels:
          station:
          freq:
          avlc_frame_type:
          acars_label: acars_label_u
          acars_flight: acars_flight_u
          acars_reg: acars_reg_u
          has_pos:
          sig_db:

      - timestamp:
          source: tsecs
          format: Unix
